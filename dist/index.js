module.exports=function(e){function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}var t={};return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=8)}([function(e,n,t){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}var r=t(1),o=i(r);e.exports=function(e){return this.cacheable&&this.cacheable(),(0,o.default)(this,e).code}},function(e,n,t){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}function o(e){var n=e.node.arguments[0].value;return e.replaceWith(v.logicalExpression("||",v.CallExpression(v.identifier("__getInjection"),[v.stringLiteral(n)]),e.node)),n}function u(e,n){var t=a.parse(n),i=[];(0,p.default)(t,{CallExpression:function(e){v.isIdentifier(e.node.callee,{name:"require"})&&(i.push(o(e)),e.skip())}}),0===i.length&&e.emitWarning("The module you are trying to inject into doesn't have any dependencies. Are you sure you want to do this?");var r=v.arrayExpression(i.map(function(e){return v.stringLiteral(e)})),u=(0,j.default)({SOURCE:t,DEPENDENCIES:r});return(0,s.default)(u,{})}Object.defineProperty(n,"__esModule",{value:!0}),n.default=u;var c=t(7),a=r(c),d=t(3),s=i(d),l=t(5),p=i(l),f=t(6),v=r(f),_=t(2),j=i(_)},function(e,n,t){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(n,"__esModule",{value:!0});var r=t(4),o=i(r);n.default=(0,o.default)("\n  module.exports = function __injector(__injections) {\n    __injections = __injections || {};\n\n    (function __validateInjection() {\n      var validDependencies = DEPENDENCIES;\n      var injectedDependencies = Object.keys(__injections);\n      var invalidInjectedDependencies = injectedDependencies.filter(function (dependency) {\n        return validDependencies.indexOf(dependency) === -1;\n      });\n\n      if (invalidInjectedDependencies.length > 0) {\n        var validDependenciesString = '- ' + validDependencies.join('\\n- ');\n        var injectedDependenciesString = '- ' + injectedDependencies.join('\\n- ');\n        var invalidDependenciesString = '- ' + invalidInjectedDependencies.join('\\n- ');\n\n        throw new Error('Some of the injections you passed in are invalid.\\n' +\n          'Valid injection targets for this module are:\\n' + validDependenciesString + '\\n' +\n          'The following injections were passed in:\\n' + injectedDependenciesString + '\\n' +\n          'The following injections are invalid:\\n' + invalidDependenciesString\n        );\n      }\n    })();\n\n    var module = { exports: {} };\n    var exports = module.exports;\n\n    function __getInjection(dependency) {\n      return __injections.hasOwnProperty(dependency) ? __injections[dependency] : null;\n    }\n\n    (function () {\n      SOURCE\n    })();\n\n    return module.exports;\n  }\n")},function(e,n){e.exports=require("babel-generator")},function(e,n){e.exports=require("babel-template")},function(e,n){e.exports=require("babel-traverse")},function(e,n){e.exports=require("babel-types")},function(e,n){e.exports=require("babylon")},function(e,n,t){e.exports=t(0)}]);