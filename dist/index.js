module.exports=function(e){function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}var t={};return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=4)}([function(e,n){e.exports=require("babel-core")},function(e,n,t){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e,n){this.cacheable&&this.cacheable();var t=(0,s.default)(this,e,n),i=t.code,r=t.map;this.callback(null,i,r)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=r;var o=t(2),s=i(o)},function(e,n,t){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e){var n=e.node.arguments[0].value;return e.replaceWith(s.types.logicalExpression("||",s.types.CallExpression(s.types.identifier("__getInjection"),[s.types.stringLiteral(n)]),e.node)),n}function o(e,n,t){var i=(0,s.transform)(n),o=i.ast,c=[];(0,s.traverse)(o,{CallExpression:function(e){s.types.isIdentifier(e.node.callee,{name:"require"})&&(c.push(r(e)),e.skip())}}),0===c.length&&e.emitWarning("The module you are trying to inject into doesn't have any dependencies. Are you sure you want to do this?");var u=s.types.arrayExpression(c.map(function(e){return s.types.stringLiteral(e)})),d=s.types.file(s.types.program([(0,a.default)({SOURCE:o,DEPENDENCIES:u})]));return(0,s.transformFromAst)(d,n,{sourceMaps:e.sourceMap,sourceFileName:e.resourcePath,inputSourceMap:t})}Object.defineProperty(n,"__esModule",{value:!0}),n.default=o;var s=t(0),c=t(3),a=i(c)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(0);n.default=(0,i.template)("\n  module.exports = function __injector(__injections) {\n    __injections = __injections || {};\n\n    (function __validateInjection() {\n      var validDependencies = DEPENDENCIES;\n      var injectedDependencies = Object.keys(__injections);\n      var invalidInjectedDependencies = injectedDependencies.filter(function (dependency) {\n        return validDependencies.indexOf(dependency) === -1;\n      });\n\n      if (invalidInjectedDependencies.length > 0) {\n        var validDependenciesString = '- ' + validDependencies.join('\\n- ');\n        var injectedDependenciesString = '- ' + injectedDependencies.join('\\n- ');\n        var invalidDependenciesString = '- ' + invalidInjectedDependencies.join('\\n- ');\n\n        throw new Error('Some of the injections you passed in are invalid.\\n' +\n          'Valid injection targets for this module are:\\n' + validDependenciesString + '\\n' +\n          'The following injections were passed in:\\n' + injectedDependenciesString + '\\n' +\n          'The following injections are invalid:\\n' + invalidDependenciesString + '\\n'\n        );\n      }\n    })();\n\n    var module = { exports: {} };\n    var exports = module.exports;\n\n    function __getInjection(dependency) {\n      return __injections.hasOwnProperty(dependency) ? __injections[dependency] : null;\n    }\n\n    (function () {\n      SOURCE\n    })();\n\n    return module.exports;\n  }\n")},function(e,n,t){e.exports=t(1)}]);
//# sourceMappingURL=index.js.map